import tkinter as tk
from PIL import Image, ImageTk
from constants import THEMES

def fade_in_icon(label, img, steps=30, delay=20):
    def step(alpha):
        img_resized = img.resize((40 + alpha // 2, 40 + alpha // 2), Image.Resampling.LANCZOS)
        photo = ImageTk.PhotoImage(img_resized)
        label.configure(image=photo)
        label.image = photo
        if alpha < steps:
            label.after(delay, lambda: step(alpha + 1))

    step(0)

def check_weather_warning(result, weather_warning_label):
    weather_warning_label.config(text="")
    hourly_forecast, daily_forecast = result

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    temperatures = [temp for _, temp, _ in hourly_forecast]
    min_temp = min(temperatures)
    max_temp = max(temperatures)

    if max_temp > 35:
        weather_warning_label.config(text="‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –û–∂–∏–¥–∞–µ—Ç—Å—è —Å–∏–ª—å–Ω–∞—è –∂–∞—Ä–∞! –ë–µ—Ä–µ–≥–∏—Ç–µ—Å—å –ø–µ—Ä–µ–≥—Ä–µ–≤–∞.", fg=THEMES["light"]["error"])
    elif min_temp < -10:
        weather_warning_label.config(text="‚ùÑÔ∏è –í–Ω–∏–º–∞–Ω–∏–µ: –û—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–∞—è –ø–æ–≥–æ–¥–∞. –û–¥–µ–Ω—å—Ç–µ—Å—å —Ç–µ–ø–ª–æ.", fg=THEMES["light"]["accent"])
    else:
        weather_warning_label.config(text="‚úÖ –ü–æ–≥–æ–¥–∞ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è.", fg=THEMES["light"]["accent"])

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Å–∞–¥–∫–∏ –∏–ª–∏ –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
    for status, _ in daily_forecast:
        if "–¥–æ–∂–¥—å" in status or "—Å–Ω–µ–≥" in status:
            weather_warning_label.config(text="üåßÔ∏è –í–Ω–∏–º–∞–Ω–∏–µ: –û–∂–∏–¥–∞—é—Ç—Å—è –æ—Å–∞–¥–∫–∏. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–æ–Ω—Ç!", fg=THEMES["light"]["accent"])

def show_hourly_and_daily_forecast(frame, city, hourly, daily, is_dark_theme):
    colors = THEMES["dark"] if is_dark_theme else THEMES["light"]
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —á–∞—Å–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
    hourly_container = tk.Frame(frame, bg=colors["bg"], padx=20, pady=20)
    hourly_container.pack(fill=tk.X, pady=(0, 20))
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Å–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
    title = tk.Label(hourly_container, 
                    text=f"–ü–æ–≥–æ–¥–∞ –ø–æ —á–∞—Å–∞–º: {city}", 
                    font=('Segoe UI', 16, 'bold'),
                    bg=colors["bg"],
                    fg=colors["text"])
    title.pack(pady=(0, 20))

    # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –ø–æ–≥–æ–¥–æ–π
    cards_frame = tk.Frame(hourly_container, bg=colors["bg"])
    cards_frame.pack(fill=tk.X)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–∞ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    for i in range(8):
        cards_frame.grid_columnconfigure(i, weight=1, uniform="equal")

    for i, (time, temp, icon_path) in enumerate(hourly):
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Å–∞
        card = tk.Frame(cards_frame,
                       bg=colors["secondary"],
                       padx=10,
                       pady=15,
                       relief="flat",
                       borderwidth=1)
        card.grid(row=0, column=i, padx=5, sticky="nsew")

        # –í—Ä–µ–º—è
        time_label = tk.Label(card,
                            text=time,
                            font=('Segoe UI', 12),
                            bg=colors["secondary"],
                            fg=colors["text"])
        time_label.pack(pady=(0, 10))

        # –ò–∫–æ–Ω–∫–∞ –ø–æ–≥–æ–¥—ã
        img = icon_path.resize((40, 40), Image.Resampling.LANCZOS)
        photo = ImageTk.PhotoImage(img)
        icon_label = tk.Label(card,
                            image=photo,
                            bg=colors["secondary"])
        icon_label.image = photo
        icon_label.pack(pady=10)

        # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
        temp_label = tk.Label(card,
                            text=f"{temp}¬∞C",
                            font=('Segoe UI', 14, 'bold'),
                            bg=colors["secondary"],
                            fg=colors["text"])
        temp_label.pack()

        fade_in_icon(icon_label, img)

    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ 3 –¥–Ω—è
    daily_container = tk.Frame(frame, bg=colors["bg"], padx=20, pady=20)
    daily_container.pack(fill=tk.X)

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ 3 –¥–Ω—è
    daily_title = tk.Label(daily_container,
                          text="–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è:",
                          font=('Segoe UI', 16, 'bold'),
                          bg=colors["bg"],
                          fg=colors["text"])
    daily_title.pack(pady=(0, 20))

    # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º –Ω–∞ 3 –¥–Ω—è
    daily_cards = tk.Frame(daily_container, bg=colors["bg"])
    daily_cards.pack(fill=tk.X)

    for i in range(3):
        daily_cards.grid_columnconfigure(i, weight=1, uniform="equal")

    for i, (status, temp) in enumerate(daily):
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
        card = tk.Frame(daily_cards,
                       bg=colors["secondary"],
                       padx=20,
                       pady=20,
                       relief="flat",
                       borderwidth=1)
        card.grid(row=0, column=i, padx=10, sticky="nsew")

        # –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        day_label = tk.Label(card,
                           text=f"–î–µ–Ω—å {i+1}",
                           font=('Segoe UI', 14, 'bold'),
                           bg=colors["secondary"],
                           fg=colors["text"])
        day_label.pack(pady=(0, 10))

        # –°—Ç–∞—Ç—É—Å –ø–æ–≥–æ–¥—ã
        status_label = tk.Label(card,
                              text=status,
                              font=('Segoe UI', 12),
                              bg=colors["secondary"],
                              fg=colors["text"])
        status_label.pack(pady=5)

        # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
        temp_label = tk.Label(card,
                            text=f"{temp}¬∞C",
                            font=('Segoe UI', 16, 'bold'),
                            bg=colors["secondary"],
                            fg=colors["text"])
        temp_label.pack() 